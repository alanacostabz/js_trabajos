
PATRONES DE DISEÑO
  - Los patrones de diseño son técnicas que van a solucionar un problema
  - Ayudan a crear objetos, estructurar clases o darle comportamiento a clases
  - Ayudan a la escalabilidad del sistema


  1. SINGLETON
    - Sirve para poder crear un objeto único en todo el sistema y se protege de que no se pueda crear otro objeto.
    - Se usa mucho en la inyección de dependencias en el frontend

  2. BUILDER
    - Nos ayuda que nos da una solución para trabajar con constructores que requieren muchos parametros, brinca escalabilidad para hacerlo más dinámico
    - Trabaja con un director que es el encargado en decir quien es el objeto tipo "5 elemetos" por ejemplo e invoca 5 elmentos
    - Separa la responsabilidad de creación y tambien hace que puede ser más escalable la creación de nuevos objetos a partir de esta estructurar

  3. OBSERVADOR
    - Este patrón es tener un objeto al cual un conjunto de otros objetos van a observar, este objeto tiene estados(propiedades que cambian) y dichos objetos que estan observando ese objeto necesitan enterarse cuando ese objeto cambie.
    - Se utiliza mucho en el frontend, con la reactividad y en el backend con aplicaciones en tiempo real por que tenemos que notificar el cambio de objeto

  4. REPOSITORY
    - Separar nuestra persistencia, conexión de base de datos, todo el manejo de base de datos en una capa que se invoca y otorga

  5. FACADE
    - Es un patrón de diseño que prácticamente representa una fachada (a mi no me interesa que hay de atras solo quiero la funcionalidad)

  6. ESTRATEGY
    - Hace uso de una clase que implementa una interfaz, una interfaz en comun y esta interfaz es la que implementa el método que ejecuta la acción, entones mi clase la implemento en esta interfaz y a la clase le ponemos una funcionalidad distinta y hace que sea mas escalable

  IMPORTANTE SABER
    1. POO
    2. HERENCIA
    3. ORIENTADO A CLASES