ALGORITHMS: What and Why?
  - An algoritm is a squence of steps (instructions) to solve a clearly defined problem.
  - The same steps alaways lead to the some solutions of a problem (given the same inputs)

WHAT IS THE "BEST POSIIBLE SOLUTION?
  - Minimum amount of code?
  - Best performance? -> THIS IS THE BEST SOLUTION
  - Least memory usage?
  - Peronsla preferenceÂ¡

MEASURING PERFORMANCE (TIME COMPLEXITY - BIG O)
  - We care about the trend/kind of function

BIG O NOTATION
  - Makes easy for us to quickly express the time complexity of a given algorithm to our developers
  - its a standar way of compare performance on algorithms
   
  - linear time: O(n)
  - constant time: O(1)
  - quadratic time: O(n^2)
  - cubic time: O(n^3)

  DERIVING BIG O (ASYMPTOTIC ANALYSIS)
  - We care about the function, no for concrete numbers
  - for deriving we use thecnique called asymptotic analysis and involved 3 simples steps:
    1. define te function (T=a*n+b)
      count the number of expression executions
    2. find the fastet growing term (T=(a*n)+b)
    3. remove the coefficient  (T=n)  

  USING BIG O TO COMPARE ALGORITHMS
    - O(1) constant time complexity -> n (number of input) has no effect on the time algorithm takes

    - O(log n) logarithmic time complexity -> execution time grows logarithmically with n

    - O(n) linear time complexity -> execution time grows linearly with n

    - O(n^2) quadratic time complexity -> execution time grows quadratically with n

    - O(2^n) exponential time complexity -> execution time grows exponentially with n

